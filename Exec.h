using namespace System;
using namespace System::Net;

using namespace System::Collections::Generic;
using namespace System::IO;
using namespace System::Text;
#pragma once
#ifndef __EXEC__
#define __EXEC__

ref class WP;
//Parent Class of WP and WS 
//allows acess to basic information id, name 
 ref class Exec
{
private:

String ^ name;
//the WP id of WS id
__int64 id;
// index of the ws  or wp in the list of executables the parent WP holds
// the index is the index of the WS in the list of enabled WP or WS within a WP
// WS or WP not enabled in the Workplan then it is not counted as part of the list
__int64 index;
//pointer to the WP containing this executable 
WP^ parent;
// the STPNC id of the WS or WP that is being generated form MTconnect Data
__int64 copyID;
bool typeWP;
public:
	//whether this executable is a WP or WS
  bool isWP(){return typeWP;};
	//get name of Executable
	String^ getName(){return name;};
	// get stpnc id of Executable
	__int64 getId(){return id;};
	// stpnc index in list of enabled executalbes for an enabled parent WorkPlan
	__int64 getIndex(){return index;};
	// get the stpnc id for the mirrored WS or WP being generated by MTConnect Data
	__int64 getCopyID() { return copyID; }
	//set the stpnc id for the mirrored WS or WP being generated by MTConnect Data
	//should only be set after creating the WS or WP with apt
	void setCopyID(__int64 i) { copyID = i; }
	// return true if the mtconnect generated copy of this WS or WP has been created
	bool copyCreated() { if (copyID == -1) { return false; } else { return true; } }
	//get a pointer to the parent of this ws or wp
	WP^ getParent();
	//name,stpnc id, index of executable in parent WP , whether the object is a WS or WP
	Exec(String^ n,__int64 ID,__int64 in,WP^p,bool iswp){
	name=n;
	id=ID;
	index=in;
	parent=p;
	typeWP=iswp;
	copyID = -1;
	}
};
#endif